generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RegistrationMethod {
  ONECLICK
  MOBILE
  EMAIL
  SSO
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum UserStatus {
  ACTIVE
  WAITING
  IN_ACTIVE
  BANNED
}

enum DocumentsStatus {
  PENDING
  IN_REVIEW
  VERIFYIED
  REJECTED
}

model Users {
  id                 Int                 @id @unique @default(autoincrement())
  uuid               String              @unique @default(uuid()) @db.Uuid
  registrationMethod RegistrationMethod?
  status             UserStatus
  userNameId         String              @unique @db.VarChar(30)
  userCodeName       String?             @unique @db.VarChar(30)
  email              String?             @unique @db.VarChar(100)
  phoneNumber        String?             @unique @db.VarChar(20)
  verifiedEmail      Boolean?            @default(false)
  verifiedMobile     Boolean?            @default(false)
  resetToken         String?
  password           String              @db.VarChar(255)
  softDelete         Boolean             @default(false)
  createdAt          DateTime            @default(now()) @db.Timestamptz(6)
  createdBy          Int?                @db.Integer
  updatedAt          DateTime?           @default(now()) @db.Timestamptz(6)
  updatedBy          Int?                @db.Integer
  oauth2Tokens       Oauth2Tokens[]
  profile            Profiles?
  referenceCode      ReferenceCode[]
  rolesUserMapping   RolesUserMapping[]
  Documents          Documents?
}

model Profiles {
  id         Int        @id @unique @default(autoincrement())
  uuid       String     @unique @default(uuid()) @db.Uuid
  userId     Int        @unique @db.Integer
  firstName  String?    @db.VarChar(50)
  lastName   String?    @db.VarChar(50)
  dob        DateTime?  @db.Date
  gender     Gender?
  avatarUrl  String?    @db.VarChar(255)
  softDelete Boolean    @default(false)
  createdAt  DateTime   @default(now()) @db.Timestamptz(6)
  createdBy  Int?       @db.Integer
  updatedAt  DateTime?  @default(now()) @db.Timestamptz(6)
  updatedBy  Int?       @db.Integer
  address    Addresses?
  user       Users      @relation(fields: [userId], references: [id])
}

model Addresses {
  id         Int       @id @unique @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  profileId  Int       @unique @db.Integer
  countryId  Int       @db.Integer
  state      String?   @db.VarChar(60)
  zipCode    String?   @db.VarChar(50)
  softDelete Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  createdBy  Int?      @db.Integer
  updatedAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy  Int?      @db.Integer
  profiles   Profiles  @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profileId_fk")
}

model Countries {
  id          Int       @id @unique @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  name        String    @db.VarChar(60)
  iso2        String?   @db.VarChar(10)
  iso3        String    @db.VarChar
  dialCode    String    @db.VarChar
  flagUrl     String    @db.VarChar(255)
  phoneLength String?   @db.VarChar(60)
  currency    String?   @db.VarChar(10)
  softDelete  Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  createdBy   Int?      @db.Integer
  updatedAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy   Int?      @db.Integer
}

model Currencies {
  id         Int       @id @unique @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  code       String    @db.VarChar(50)
  name       String    @db.VarChar(40)
  symbol     String    @db.VarChar(40)
  softDelete Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  createdBy  Int?      @db.Integer
  updatedAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy  Int?      @db.Integer
}

model Oauth2Tokens {
  id             Int             @id @unique @default(autoincrement())
  uuid           String          @unique @default(uuid()) @db.Uuid
  userId         Int             @db.Integer
  tokenType      String?         @db.VarChar(50)
  accessToken    String?
  refreshToken   String?
  isRevoked      Boolean         @default(false)
  softDelete     Boolean         @default(false)
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  createdBy      Int?            @db.Integer
  updatedAt      DateTime?       @default(now()) @db.Timestamptz(6)
  updatedBy      Int?            @db.Integer
  users          Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId_fk")
  longinSessions LonginSessions?
}

model LonginSessions {
  id             Int           @id @unique @default(autoincrement())
  uuid           String        @unique @default(uuid()) @db.Uuid
  device         String?       @db.VarChar(50)
  os             String?       @db.VarChar(50)
  ip             String?       @db.VarChar(50)
  location       String?       @db.VarChar(50)
  loginAt        DateTime      @default(now()) @db.Timestamptz(6)
  logoutAt       DateTime?     @db.Timestamptz(6)
  browser        String?       @db.VarChar(50)
  isActive       Boolean       @default(true)
  softDelete     Boolean       @default(false)
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  createdBy      Int?          @db.Integer
  updatedAt      DateTime?     @default(now()) @db.Timestamptz(6)
  updatedBy      Int?          @db.Integer
  Oauth2Tokens   Oauth2Tokens? @relation(fields: [oauth2TokensId], references: [id])
  oauth2TokensId Int           @unique
}

model MicroServicePermissionMapping {
  id           Int       @id @unique @default(autoincrement())
  uuid         String    @unique @default(uuid()) @db.Uuid
  serviceId    Int       @unique @db.Integer
  permissionId Int       @unique @db.Integer
  softDelete   Boolean   @default(false)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  createdBy    Int?      @db.Integer
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy    Int?      @db.Integer

  permissions   Permissions   @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissionId_fk")
  microServices MicroServices @relation(fields: [serviceId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "serviceId_fk")
}

model MicroServices {
  id                            Int                            @id @unique @default(autoincrement())
  uuid                          String                         @db.Uuid
  serviceName                   String                         @db.VarChar(30)
  description                   String?                        @db.VarChar(50)
  softDelete                    Boolean                        @default(false)
  createdAt                     DateTime                       @default(now()) @db.Timestamptz(6)
  createdBy                     Int?                           @db.Integer
  updatedAt                     DateTime?                      @default(now()) @db.Timestamptz(6)
  updatedBy                     Int?                           @db.Integer
  microServicePermissionMapping MicroServicePermissionMapping?
}

model Otps {
  id          Int       @id @unique @default(autoincrement())
  uuid        String    @unique @default(uuid()) @db.Uuid
  userId      Int       @db.Integer
  code        String    @db.VarChar(15)
  expireIn    Int
  secret      String    @db.VarChar(100)
  isUsed      Boolean   @default(false)
  description String?   @db.VarChar(100)
  softDelete  Boolean   @default(false)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  createdBy   Int?      @db.Integer
  updatedAt   DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy   Int?      @db.Integer
}

model Permissions {
  id                            Int                             @id @unique @default(autoincrement())
  uuid                          String                          @unique @default(uuid()) @db.Uuid
  title                         String                          @db.VarChar(30)
  slug                          String                          @db.VarChar(30)
  description                   String?                         @db.VarChar(50)
  softDelete                    Boolean                         @default(false)
  createdAt                     DateTime                        @default(now()) @db.Timestamptz(6)
  createdBy                     Int?                            @db.Integer
  updatedAt                     DateTime?                       @default(now()) @db.Timestamptz(6)
  updatedBy                     Int?                            @db.Integer
  microServicePermissionMapping MicroServicePermissionMapping[]
  rolesPermissionsMapping       RolesPermissionsMapping[]
}

model Roles {
  id                      Int                       @id @unique @default(autoincrement())
  uuid                    String                    @unique @default(uuid()) @db.Uuid
  title                   String                    @db.VarChar(20)
  slug                    String                    @db.VarChar(20)
  description             String?                   @db.VarChar(100)
  softDelete              Boolean                   @default(false)
  createdAt               DateTime                  @default(now()) @db.Timestamptz(6)
  createdBy               Int?                      @db.Integer
  updatedAt               DateTime?                 @default(now()) @db.Timestamptz(6)
  updatedBy               Int?                      @db.Integer
  rolesPermissionsMapping RolesPermissionsMapping[]
  rolesUserMapping        RolesUserMapping[]
}

model RolesPermissionsMapping {
  id           Int         @id @unique @default(autoincrement())
  uuid         String      @unique @default(uuid()) @db.Uuid
  roleId       Int         @db.Integer
  permissionId Int         @unique @db.Integer
  softDelete   Boolean     @default(false)
  createdAt    DateTime    @default(now()) @db.Timestamptz(6)
  createdBy    Int?        @db.Integer
  updatedAt    DateTime?   @default(now()) @db.Timestamptz(6)
  updatedBy    Int?        @db.Integer
  permissions  Permissions @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissionId_fk")
  roles        Roles       @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roleId_fk")
}

model RolesUserMapping {
  id         Int       @id @unique @default(autoincrement())
  uuid       String    @unique @default(uuid()) @db.Uuid
  userId     Int       @db.Integer
  roleId     Int       @db.Integer
  softDelete Boolean   @default(false)
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  createdBy  Int?      @db.Integer
  updatedAt  DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy  Int?      @db.Integer
  roles      Roles     @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roleId_fk")
  users      Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId_fk")
}

model ReferenceCode {
  id           Int       @id @unique @default(autoincrement())
  uuid         String    @unique @default(uuid()) @db.Uuid
  userId       Int       @unique @db.Integer
  code         String    @unique @db.VarChar
  descriptions String?   @db.VarChar
  softDelete   Boolean   @default(false)
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  createdBy    Int?      @db.Integer
  updatedAt    DateTime? @default(now()) @db.Timestamptz(6)
  updatedBy    Int?      @db.Integer
  users        Users     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}

model Documents {
  id           Int             @id @unique @default(autoincrement())
  uuid         String          @unique @default(uuid()) @db.Uuid
  userId       Int             @unique @db.Integer
  documentType String          @db.VarChar
  documentUrl  String          @db.VarChar
  isVerifiyed  Boolean         @default(false)
  status       DocumentsStatus @default(PENDING)
  createdBy    Int?            @db.Integer
  updatedAt    DateTime?       @default(now()) @db.Timestamptz(6)
  updatedBy    Int?            @db.Integer
  users        Users           @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "userId")
}
